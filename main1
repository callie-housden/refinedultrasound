#From code with Brad Demarest
#Ultrasound of kmt2d mutants, 3 and 5 month males


library(data.table)
library(ggplot2)
library(ggforce)
library(ggrepel)
library(patchwork)

library(rstatix)
library(ggsignif)
library(ggpubr)
library(tibble)

full_tab = fread("Allcombined_sites_ultrasound_analysis_2023-05-16.txt")

# Human BMI = kg / m^2.
# To compute correctly using g and cm as input:
# BMI = (g / cm^2) * 10

full_tab[, BMI_human:=(weight_gr / length_cm^2) * 10]

# Create unique fish identifier.
full_tab$id2 = paste(sprintf("%03d", full_tab$fish_id), 
                     full_tab$sex, 
                     full_tab$Age, 
                     full_tab$genotype, 
                     full_tab$Line, 
                     sep="_")


################################################################################
#only males used in analysis
full_tab = full_tab[sex == "M"]


measure_list = list(Vs=c("Vs_1", "Vs_2", "Vs_3"),
                    Vd=c("Vd_2", "Vd_2", "Vd_3"),
                    As=c("As_1", "As_2", "As_3"),
                    Ad=c("Ad_1", "Ad_2", "Ad_3"),
                    HR=c("HR_1", "HR_2", "HR_3"),
                    inflow=c("inflow_avg_1", "inflow_avg_2", "inflow_avg_3"),
                    outflow=c("outflow_avg_1", "outflow_avg_2", "outflow_avg_3"))




id_vec = c("fish_id", "genotype", "sex", "weight_gr", "length_cm",
           "BMI_human", "Min_Time_under_tricaine", "dob", "Age", "age", 
           "Line", "line", "id2")

# mtab keeps tech replicates separate.
mtab = melt(full_tab, 
            id.vars=id_vec, 
            measure.vars=measure_list, 
            variable.name="tech_rep_id")

by_id2 = mtab[, list(Vs_avg=mean(Vs, na.rm=TRUE),
                     Vs_min=min(Vs, na.rm=TRUE),
                     Vs_max=max(Vs, na.rm=TRUE),
                     Vd_avg=mean(Vd, na.rm=TRUE),
                     Vd_min=min(Vd, na.rm=TRUE),
                     Vd_max=max(Vd, na.rm=TRUE),
                     As_avg=mean(As, na.rm=TRUE),
                     As_min=min(As, na.rm=TRUE),
                     As_max=max(As, na.rm=TRUE),
                     Ad_avg=mean(Ad, na.rm=TRUE),
                     Ad_min=min(Ad, na.rm=TRUE),
                     Ad_max=max(Ad, na.rm=TRUE),
                     HR_avg=mean(HR, na.rm=TRUE),
                     HR_min=min(HR, na.rm=TRUE),
                     HR_max=max(HR, na.rm=TRUE),
                     inflow_avg=mean(inflow, na.rm=TRUE),
                     outflow_avg=mean(outflow, na.rm=TRUE)),
              by=list(id2, genotype, sex, line, age, weight_gr, length_cm, BMI_human)]





# Plots.------------------------------------------------------------------------

twenty_color = c("#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c",
                 "#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5",
                 "#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f",
                 "#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5")
   
# #========================================
#   
# 
# # Possibly useful: https://towardsdatascience.com/removing-non-linear-trends-from-timeseries-data-b21f7567ed51
# 

# #========================================

xtab = data.table(expand.grid(sex=sort(unique(by_id2$sex)),
                              age=sort(unique(by_id2$age)),
                              stringsAsFactors=FALSE))


model_res = list()

for (i in seq(nrow(xtab))) {
  tmp_sex = xtab[i, sex]
  tmp_age = xtab[i, age]
  tmp_data = by_id2[sex == tmp_sex & age == tmp_age & genotype == "WT"]
  
  tmp_fit_Ad = lm(Ad_avg ~ weight_gr, data=tmp_data)
  
  tmp_fit_As = lm(As_avg ~ weight_gr, data=tmp_data)
  
  tmp_row = data.table(sex=tmp_sex,
                       age=tmp_age,
                       Ad_model=list(tmp_fit_Ad),
                       As_model=list(tmp_fit_As),
                       As_intercept=tmp_fit_As$coefficients[1],
                       As_slope=tmp_fit_As$coefficients[2],
                       Ad_intercept=tmp_fit_Ad$coefficients[1],
                       Ad_slope=tmp_fit_Ad$coefficients[2])
  
  model_res[[i]] = tmp_row
  
  # Now, add fitted values for each group. Add directly to `by_id2`.
  
  by_id2[sex == tmp_sex & age == tmp_age,
         c("Ad_fit", "As_fit"):=list(predict(tmp_fit_Ad,
                                             by_id2[sex == tmp_sex & age == tmp_age]),
                                     predict(tmp_fit_As,
                                             by_id2[sex == tmp_sex & age == tmp_age]))]
  
  
}

model_tab = rbindlist(model_res)


#========================================
# Compute Stroke Area Difference and Ejection Fraction Area, Cardiac Output

by_id2[, SA:=Ad_avg - As_avg]
by_id2[, EFA:=SA / Ad_avg]
by_id2[, CO:=HR_avg * SA]


#========================================


######################################################################
#CHANGES will happen HERE AS I FINISH MORE ULTRASOUND ANALYSIS!!!!!!!!!!!!!!!!!


fwrite(by_id2,
       file="ultrasound_values_males_6lines_2024may.txt",
       sep="\t")

#========================================

by_id2[, genotype:=factor(genotype, levels=c("WT", "HET", "MUT"))]

by_genotype_line = by_id2[, list(mean_Ad_avg=mean(Ad_avg, na.rm=TRUE),
                                 mean_As_avg=mean(As_avg, na.rm=TRUE),
                                 sd_Ad_avg=sd(Ad_avg, na.rm=TRUE),
                                 sd_As_avg=sd(As_avg, na.rm=TRUE),
                                 mean_SA=mean(SA, na.rm=TRUE),
                                 mean_EFA=mean(EFA, na.rm=TRUE),
                                 sd_SA=sd(SA, na.rm=TRUE),
                                 sd_EFA=sd(EFA, na.rm=TRUE),
                                 mean_weight=mean(weight_gr, na.rm=TRUE),
                                 sd_weight=sd(weight_gr, na.rm=TRUE),
                                 mean_HR_avg=mean(HR_avg, na.rm=TRUE),
                                 sd_HR_avg=sd(HR_avg, na.rm=TRUE),
                                 mean_inflow_avg=mean(inflow_avg, na.rm=TRUE),
                                 sd_inflow_avg=sd(inflow_avg, na.rm=TRUE),
                                 sd_outflow_avg=sd(outflow_avg, na.rm=TRUE),
                                 mean_outflow_avg=mean(outflow_avg, na.rm=TRUE)),
                          by=list(sex, age, genotype, line)]

genotype_colors = c(WT="#74add1", HET="#fee090", MUT="#f46d43")



#===============================================================================

#-------------------------------------------------------------------------------
# One page per line, show Ad, As, SA, EFA, weight, HR, CO.
# inflow and outflow


# Allow y-axis scale to vary by line.


#-----------Compute p-values--------------
#????????????????????
# 11 Mar 2022.
# To get p.adjust values correct, need to do our own t-tests and then
# re-format into tibble appropriate for stat_pvalue_manual.
# ** Check line 831.

# 
# pres_list = list()
# 
# for (i in seq_along(var_vec)) {
#   tmp_var = var_vec[i]
#   tmp_formula = as.formula(paste(tmp_var, "~ genotype"))
#   tmp_test <- as_tibble(by_id2) %>%
#     group_by(line, age, sex) %>%
#     filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
#     filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
#     tukey_hsd(formula=tmp_formula)



# ! ALERT !
# Tukey HSD adjusted p-values have been adjusted for all
# comparisons within each variable (e.g. all comparisons of Ad),
# but _not_ adjusted for the 5 different ultrasound variables!

# Ad
test_tab_Ad <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(Ad_avg ~ genotype)


# As
test_tab_As <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(As_avg ~ genotype)

# HR
test_tab_HR <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(HR_avg ~ genotype)

# SA
test_tab_SA <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(SA ~ genotype)


# EFA
test_tab_EFA <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(EFA ~ genotype)


# weight
test_tab_weight <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(weight_gr ~ genotype)

#Inflow
test_tab_inflow <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(inflow_avg ~ genotype)

#outflow
test_tab_outflow <- as_tibble(by_id2) %>%
  group_by(line, age, sex) %>%
  filter(length(unique(genotype)) >= 2) %>%       #Require at least 2 genotypes.
  filter(all(as.vector(table(genotype)) >= 2)) %>% #Require at least 2 measurements per genotype.
  tukey_hsd(outflow_avg ~ genotype)

#----------------------------------------


genotype_colors = c(WT="#74add1", HET="#fee090", MUT="#f46d43")

# If geom_segment(x=as.numeric(genotype) - cross_width,...) is
# in the first layer, then x is initiated as numeric, not discrete axis!!



error_size = 0.3
cross_size = 1.2
error_width = 0.4
cross_width = 0.25 #0.3
error_color = "grey30"
bin_denom = 14.5 #effected by step_increase and y_mult_top, was 11
step_increase = 0.10 #0.05 overlap, 0.20 good
y_mult_top = 0.062 

colnames(by_id2) <- make.unique(names(by_id2))

pdf("dotplots_6_ultrasound_lines_SIG-VALUES-ON_5_variables_2024.pdf", width=7.5, height=30) #PDF values



for (tmp_line in sort(unique(by_id2$line))) {
  
  tmp_tab = by_id2[line == tmp_line]
  tmp_by  = by_genotype_line[line == tmp_line]
  id2 = by_id2[id2 == id2]
  
  tmp_test_Ad = filter(test_tab_Ad, line == tmp_line)
  tmp_test_Ad = tmp_test_Ad %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_Ad <- add_y_position(tmp_test_Ad, step.increase=step_increase, scales = "free") #default is 0.12 step.increase=0.06, scales = "free" 
  
  tmp_test_As = filter(test_tab_As, line == tmp_line)
  tmp_test_As = tmp_test_As %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_As <- add_y_position(tmp_test_As, step.increase=step_increase, scales = "free")
  
  tmp_test_SA = filter(test_tab_SA, line == tmp_line)
  tmp_test_SA = tmp_test_SA %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_SA <- add_y_position(tmp_test_SA, step.increase=step_increase, scales = "free")
  
  tmp_test_EFA = filter(test_tab_EFA, line == tmp_line)
  tmp_test_EFA = tmp_test_EFA %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_EFA <- add_y_position(tmp_test_EFA, step.increase=step_increase, scales = "free")
  
  tmp_test_weight = filter(test_tab_weight, line == tmp_line)
  tmp_test_weight = tmp_test_weight %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_weight <- add_y_position(tmp_test_weight, step.increase=step_increase, scales = "free")
  
  tmp_test_HR = filter(test_tab_HR, line == tmp_line)
  tmp_test_HR = tmp_test_HR %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_HR <- add_y_position(tmp_test_HR, step.increase=step_increase, scales = "free")
  
  tmp_test_inflow = filter(test_tab_inflow, line == tmp_line)
  tmp_test_inflow = tmp_test_inflow %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_inflow <- add_y_position(tmp_test_inflow, step.increase=step_increase, scales = "free")
  
  tmp_test_outflow = filter(test_tab_outflow, line == tmp_line)
  tmp_test_outflow = tmp_test_outflow %>% mutate(panel_group=paste(age, sex, sep="_"))
  tmp_test_outflow <- add_y_position(tmp_test_outflow, step.increase=step_increase, scales = "free")
  
  #---Ad panels ----  
  plt_Ad = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_Ad_avg - sd_Ad_avg,
                      ymax=mean_Ad_avg + sd_Ad_avg,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_Ad_avg,
                     yend=mean_Ad_avg,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    geom_dotplot(data=tmp_tab,
                 aes(y=Ad_avg, x=genotype, fill=genotype),
                 dotsize=1, binaxis="y", stackdir="center",
                 binwidth=diff(range(tmp_tab$Ad_avg)) / bin_denom, 
                 binpositions="bygroup", color="grey30") +
    scale_fill_manual(values=genotype_colors) +
    labs(title="Diastolic Area") +
    facet_grid(cols = vars(age)) + # (sex ~ age)
    stat_pvalue_manual(data=tmp_test_Ad, 
                       label.size=3.0, tip.length = 0.01,
                       label="p.adj", hide.ns=TRUE, step.increase = step_increase)  +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top))) #changed from 0.05 +
    #geom_label_repel(data=tmp_tab, aes(x= genotype, y=Ad_avg, label= id2), hjust=0,
                   #  size=3, segment.size=0.25, nudge_y = 0.5, direction="y", na.rm = TRUE) 
  
  
  
  #---As panels ----
  plt_As = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_As_avg - sd_As_avg,
                      ymax=mean_As_avg + sd_As_avg,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_As_avg,
                     yend=mean_As_avg,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    # geom_point(data=tmp_tab,
    #            aes(y=As_avg, x=genotype, fill=genotype),
    #            size=3, color="grey30", shape=21) +
    geom_dotplot(data=tmp_tab,
                 aes(y=As_avg, x=genotype, fill=genotype),
                 dotsize=1, binaxis="y", stackdir="center",
                 binwidth=diff(range(tmp_tab$As_avg)) / bin_denom,
                 binpositions="bygroup", color="grey30") +
    scale_fill_manual(values=genotype_colors) +
    labs(title="Systolic Area") +
    facet_grid(cols = vars(age)) + 
    stat_pvalue_manual(data=tmp_test_As,
                       label="p.adj", hide.ns=FALSE,
                       label.size=3, tip.length = 0.01,step.increase = step_increase) +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top)))
  
  #---SA panels ----
  plt_SA = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_SA_avg - sd_SA_avg,
                      ymax=mean_SA_avg + sd_SA_avg,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_SA_avg,
                     yend=mean_SA_avg,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    geom_point(data=tmp_tab,
               aes(y=SA, x=genotype, fill=genotype),
               size=3, color="grey30", shape=21) +
    
    geom_dotplot(data=tmp_tab,
                 aes(y=SA, x=genotype, fill=genotype),
                 dotsize=1, binaxis="y", stackdir="center",
                 binwidth=diff(range(tmp_tab$SA)) / bin_denom,
                 binpositions="bygroup", color="grey30") +
    
    scale_fill_manual(values=genotype_colors) +
    labs(title="Stroke Area Difference") +
    facet_grid(cols = vars(age)) + 
    stat_pvalue_manual(data=tmp_test_SA,
                       label="p.adj", hide.ns=FALSE,
                       label.size=3, tip.length = 0.01,step.increase = step_increase) +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top)))
  
  
  #---EFA panels ----
  plt_EFA = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_EFA - sd_EFA,
                      ymax=mean_EFA + sd_EFA,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_EFA,
                     yend=mean_EFA,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    geom_dotplot(data=tmp_tab,
                 aes(y=EFA, x=genotype, fill=genotype),
                 dotsize=1, binaxis="y", stackdir="center",
                 binwidth=diff(range(tmp_tab$EFA)) / bin_denom,
                 binpositions="bygroup", color="grey30") +
    
    scale_fill_manual(values=genotype_colors) +
    labs(title="Ejection Fraction (mm^2)") +
    facet_grid(cols = vars(age)) + 
    stat_pvalue_manual(data=tmp_test_EFA,
                       label="p.adj", hide.ns=TRUE,
                       label.size=3, tip.length = 0.01,step.increase = step_increase) +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top)))
  
  
  
  #---Weight panels ----
  plt_weight = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_weight - sd_weight,
                      ymax=mean_weight + sd_weight,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_weight,
                     yend=mean_weight,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    geom_dotplot(data=tmp_tab,
                 aes(y=weight_gr, x=genotype, fill=genotype),
                 dotsize=1, binaxis="y", stackdir="center",
                 binwidth=diff(range(tmp_tab$weight_gr)) / bin_denom,
                 binpositions="bygroup", color="grey30") +
    
    scale_fill_manual(values=genotype_colors) +
    labs(title="Weight (grams)") +
    facet_grid(cols = vars(age)) + 
    stat_pvalue_manual(data=tmp_test_weight,
                       label="p.adj", hide.ns=TRUE,
                       label.size=3, tip.length = 0.01,step.increase = step_increase) +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top)))
  
  
  #---HR panels ----  
  
  plt_HR = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_HR_avg - sd_HR_avg,
                      ymax=mean_HR_avg + sd_HR_avg,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_HR_avg,
                     yend=mean_HR_avg,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    geom_dotplot(data=tmp_tab,
                 aes(y=HR_avg, x=genotype, fill=genotype),
                 dotsize=0.9, binaxis="y", stackdir="center", #was dotsize=1
                 binwidth=diff(range(tmp_tab$HR_avg)) / bin_denom, 
                 binpositions="bygroup", color="grey30") +
    scale_fill_manual(values=genotype_colors) +
    labs(title="Heart Rate") +
    facet_grid(cols = vars(age)) + 
    stat_pvalue_manual(data=tmp_test_HR, 
                       label.size=3.0, tip.length = 0.01,
                       label="p.adj", hide.ns=TRUE, step.increase = step_increase)  +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top)))
  
  
  #---inflow panels ----  
  #plt_inflow = ggplot() +
  
  #---outflow panels ----  
  #plt_outflow 
  
  plt_outflow = ggplot() +
    theme_bw() +
    geom_errorbar(data=tmp_by,
                  aes(ymin=mean_outflow_avg - sd_outflow_avg,
                      ymax=mean_outflow_avg + sd_outflow_avg,
                      x=genotype),
                  color=error_color,
                  size=error_size,
                  width=error_width) +
    geom_segment(data=tmp_by,
                 aes(y=mean_outflow_avg,
                     yend=mean_outflow_avg,
                     x=as.numeric(genotype) - cross_width,
                     xend=as.numeric(genotype) + cross_width),
                 color=error_color,
                 size=cross_size) +
    geom_dotplot(data=tmp_tab,
                 aes(y=outflow_avg, x=genotype, fill=genotype),
                 dotsize=0.9, binaxis="y", stackdir="center",
                 binwidth=diff(range(tmp_tab$outflow_avg)) / bin_denom, 
                 binpositions="bygroup", color="grey30") +
    scale_fill_manual(values=genotype_colors) +
    labs(title="Average Outflow Velocity") +
    facet_grid(cols = vars(age)) + 
    stat_pvalue_manual(data=tmp_test_outflow, 
                       label.size=3.0, tip.length = 0.01,
                       label="p.adj", hide.ns=TRUE, step.increase = step_increase)  +
    scale_y_continuous(expand = expansion(mult = c(0.15, y_mult_top))) 
  
  
  
  
  # #------ Print figure as page in pdf file -----

  
  print(plt_Ad + plt_EFA + plt_weight + plt_HR + plt_outflow +
          plot_layout(guides="collect", nrow=6, ncol=1) +
          plot_annotation(title=tmp_line))
  

}

dev.off()




# stat_pvalue_manual function is causing distortions of y-axis and dot size.


# Possible alternative: 
# https://cran.r-project.org/web/packages/ggprism/vignettes/pvalues.html
# ggprism includes the add_pvalue() function to add p-values with or without brackets to ggplots

# 
# #===============================================================================
# # Perform all desired pair-wise t-tests. Collect p-values, effect sizes and
# # confidence intervals.
